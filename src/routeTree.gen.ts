/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const ExampleLazyImport = createFileRoute('/example')()
const R3paneExampleLazyImport = createFileRoute('/3pane-example')()
const R2paneExampleLazyImport = createFileRoute('/2pane-example')()
const IndexLazyImport = createFileRoute('/')()
const ExampleIndexLazyImport = createFileRoute('/example/')()
const ExampleSettingsLazyImport = createFileRoute('/example/settings')()
const ExampleProjectsLazyImport = createFileRoute('/example/projects')()

// Create/Update Routes

const ExampleLazyRoute = ExampleLazyImport.update({
  id: '/example',
  path: '/example',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/example.lazy').then((d) => d.Route))

const R3paneExampleLazyRoute = R3paneExampleLazyImport.update({
  id: '/3pane-example',
  path: '/3pane-example',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/3pane-example.lazy').then((d) => d.Route))

const R2paneExampleLazyRoute = R2paneExampleLazyImport.update({
  id: '/2pane-example',
  path: '/2pane-example',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/2pane-example.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ExampleIndexLazyRoute = ExampleIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ExampleLazyRoute,
} as any).lazy(() => import('./routes/example/index.lazy').then((d) => d.Route))

const ExampleSettingsLazyRoute = ExampleSettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ExampleLazyRoute,
} as any).lazy(() =>
  import('./routes/example/settings.lazy').then((d) => d.Route),
)

const ExampleProjectsLazyRoute = ExampleProjectsLazyImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => ExampleLazyRoute,
} as any).lazy(() =>
  import('./routes/example/projects.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/2pane-example': {
      id: '/2pane-example'
      path: '/2pane-example'
      fullPath: '/2pane-example'
      preLoaderRoute: typeof R2paneExampleLazyImport
      parentRoute: typeof rootRoute
    }
    '/3pane-example': {
      id: '/3pane-example'
      path: '/3pane-example'
      fullPath: '/3pane-example'
      preLoaderRoute: typeof R3paneExampleLazyImport
      parentRoute: typeof rootRoute
    }
    '/example': {
      id: '/example'
      path: '/example'
      fullPath: '/example'
      preLoaderRoute: typeof ExampleLazyImport
      parentRoute: typeof rootRoute
    }
    '/example/projects': {
      id: '/example/projects'
      path: '/projects'
      fullPath: '/example/projects'
      preLoaderRoute: typeof ExampleProjectsLazyImport
      parentRoute: typeof ExampleLazyImport
    }
    '/example/settings': {
      id: '/example/settings'
      path: '/settings'
      fullPath: '/example/settings'
      preLoaderRoute: typeof ExampleSettingsLazyImport
      parentRoute: typeof ExampleLazyImport
    }
    '/example/': {
      id: '/example/'
      path: '/'
      fullPath: '/example/'
      preLoaderRoute: typeof ExampleIndexLazyImport
      parentRoute: typeof ExampleLazyImport
    }
  }
}

// Create and export the route tree

interface ExampleLazyRouteChildren {
  ExampleProjectsLazyRoute: typeof ExampleProjectsLazyRoute
  ExampleSettingsLazyRoute: typeof ExampleSettingsLazyRoute
  ExampleIndexLazyRoute: typeof ExampleIndexLazyRoute
}

const ExampleLazyRouteChildren: ExampleLazyRouteChildren = {
  ExampleProjectsLazyRoute: ExampleProjectsLazyRoute,
  ExampleSettingsLazyRoute: ExampleSettingsLazyRoute,
  ExampleIndexLazyRoute: ExampleIndexLazyRoute,
}

const ExampleLazyRouteWithChildren = ExampleLazyRoute._addFileChildren(
  ExampleLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/2pane-example': typeof R2paneExampleLazyRoute
  '/3pane-example': typeof R3paneExampleLazyRoute
  '/example': typeof ExampleLazyRouteWithChildren
  '/example/projects': typeof ExampleProjectsLazyRoute
  '/example/settings': typeof ExampleSettingsLazyRoute
  '/example/': typeof ExampleIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/2pane-example': typeof R2paneExampleLazyRoute
  '/3pane-example': typeof R3paneExampleLazyRoute
  '/example/projects': typeof ExampleProjectsLazyRoute
  '/example/settings': typeof ExampleSettingsLazyRoute
  '/example': typeof ExampleIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/2pane-example': typeof R2paneExampleLazyRoute
  '/3pane-example': typeof R3paneExampleLazyRoute
  '/example': typeof ExampleLazyRouteWithChildren
  '/example/projects': typeof ExampleProjectsLazyRoute
  '/example/settings': typeof ExampleSettingsLazyRoute
  '/example/': typeof ExampleIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/2pane-example'
    | '/3pane-example'
    | '/example'
    | '/example/projects'
    | '/example/settings'
    | '/example/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/2pane-example'
    | '/3pane-example'
    | '/example/projects'
    | '/example/settings'
    | '/example'
  id:
    | '__root__'
    | '/'
    | '/2pane-example'
    | '/3pane-example'
    | '/example'
    | '/example/projects'
    | '/example/settings'
    | '/example/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  R2paneExampleLazyRoute: typeof R2paneExampleLazyRoute
  R3paneExampleLazyRoute: typeof R3paneExampleLazyRoute
  ExampleLazyRoute: typeof ExampleLazyRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  R2paneExampleLazyRoute: R2paneExampleLazyRoute,
  R3paneExampleLazyRoute: R3paneExampleLazyRoute,
  ExampleLazyRoute: ExampleLazyRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/2pane-example",
        "/3pane-example",
        "/example"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/2pane-example": {
      "filePath": "2pane-example.lazy.tsx"
    },
    "/3pane-example": {
      "filePath": "3pane-example.lazy.tsx"
    },
    "/example": {
      "filePath": "example.lazy.tsx",
      "children": [
        "/example/projects",
        "/example/settings",
        "/example/"
      ]
    },
    "/example/projects": {
      "filePath": "example/projects.lazy.tsx",
      "parent": "/example"
    },
    "/example/settings": {
      "filePath": "example/settings.lazy.tsx",
      "parent": "/example"
    },
    "/example/": {
      "filePath": "example/index.lazy.tsx",
      "parent": "/example"
    }
  }
}
ROUTE_MANIFEST_END */
